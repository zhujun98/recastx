/**
 * Copyright (c) Paul Scherrer Institut
 * Author: Jun Zhu
 *
 * Distributed under the terms of the BSD 3-Clause License.
 *
 * The full license is in the file LICENSE, distributed with this software.
*/
syntax = "proto3";
package recastx.rpc;

import "google/protobuf/empty.proto";

service Reconstruction {
  rpc SetReconGeometry (ReconGeometry) returns (google.protobuf.Empty) {}

  rpc SetSlice (Slice) returns (google.protobuf.Empty) {}

  rpc SetVolume (Volume) returns (google.protobuf.Empty) {}

  rpc GetReconData (google.protobuf.Empty) returns (stream ReconData) {}
}

message ReconGeometry {
  repeated uint32 slice_size = 1;
  repeated uint32 volume_size = 2;
  repeated int32 x_range = 3;
  repeated int32 y_range = 4;
  repeated int32 z_range = 5;
}

message ReconSlice {
  bytes data = 1;
  uint32 col_count = 2;
  uint32 row_count = 3;
  uint64 timestamp = 4;
}

message ReconVolumeShard {
  bytes data = 1;
  uint32 col_count = 2;
  uint32 row_count = 3;
  uint32 slice_count = 4;
  uint32 pos = 5;
}

message ReconData {
  oneof data {
    ReconSlice slice = 1;
    ReconVolumeShard volume_shard = 2;
  }
}

message Slice {
  uint64 timestamp = 1;
  repeated float orientation = 2;
}

message Volume {
  bool required = 1;
}
